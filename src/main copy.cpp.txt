#include <Arduino.h>
#include "OpenKNX.h"
#include "pins.h"
#include "Adafruit_TinyUSB.h"

uint8_t const desc_hid_report[] =
{
  TUD_HID_REPORT_DESC_GENERIC_INOUT(64)
};

// USB HID object. For ESP32 these values cannot be changed after this declaration
// desc report, desc len, protocol, interval, use out endpoint
Adafruit_USBD_HID usb_hid(desc_hid_report, sizeof(desc_hid_report), HID_ITF_PROTOCOL_NONE, 2, true);

uint16_t get_report_callback (uint8_t report_id, hid_report_type_t report_type, uint8_t* buffer, uint16_t reqlen)
{
  // not used in this example
  (void) report_id;
  (void) report_type;
  (void) buffer;
  (void) reqlen;
  SERIAL_DEBUG.println("get_report_callback");
  return 0;
}

// Invoked when received SET_REPORT control request or
// received data on OUT endpoint ( Report ID = 0, Type = 0 )
void set_report_callback(uint8_t report_id, hid_report_type_t report_type, uint8_t const* buffer, uint16_t bufsize)
{
  // This example doesn't use multiple report and report ID
  (void) report_id;
  (void) report_type;


  SERIAL_DEBUG.println("set_report_callback");
  // echo back anything we received from host
  usb_hid.sendReport(0, buffer, bufsize);
}


void setup()
{
     TinyUSB_Device_Init(0);
    usb_hid.enableOutEndpoint(true);
    usb_hid.setStringDescriptor("TinyUSB HID Generic");
    usb_hid.setReportCallback(get_report_callback, set_report_callback);
    usb_hid.begin();

    
    Serial2.setTX(4);
    Serial2.setRX(5);
    SERIAL_DEBUG.begin(115200);

    delay(11000);
    SERIAL_DEBUG.println("Starting");

    while( !TinyUSBDevice.mounted() ) delay(1);
    SERIAL_DEBUG.println("Mounted");
    openknx.log("HID", "mounted");

    
	const uint8_t firmwareRevision = 0;
    openknx.init(firmwareRevision);
    openknx.setup();
}


long last = 0;
void loop()
{
    openknx.loop();
    TinyUSBDevice.task();

    if(last + 5000 < millis())
    {
        last = millis();
        
        uint8_t *data = new uint8_t[63];
        data[1] = 0xAB;
        data[2] = 0xCD;
        data[3] = 0xEF;
        usb_hid.sendReport(0, data, 63);
    }
}
